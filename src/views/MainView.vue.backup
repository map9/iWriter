<template>
  <div class="h-full flex flex-col">
    <!-- Title Bar -->
    <TitleBar />
    
    <!-- Main Content -->
    <div class="flex-1 flex overflow-hidden">
      <!-- Left Sidebar -->
      <LeftSidebar v-if="appStore.showLeftSidebar" />
      
      <!-- Editor Area -->
      <div class="flex-1 flex flex-col">
        <!-- Document Tabs -->
        <div v-if="appStore.tabs.length > 0" class="flex border-b border-gray-200 bg-gray-50">
          <div 
            v-for="tab in appStore.tabs" 
            :key="tab.id"
            :class="[
              'px-4 py-2 border-r border-gray-200 cursor-pointer flex items-center space-x-2 min-w-0',
              tab.isActive ? 'bg-white border-b-white' : 'hover:bg-gray-100'
            ]"
            @click="switchTab(tab.id)"
          >
            <!-- Document Type Icon -->
            <component 
              :is="getTabIcon(tab)" 
              class="w-4 h-4 flex-shrink-0"
            />
            
            <!-- Tab Name -->
            <span class="truncate text-sm">{{ tab.name }}</span>
            
            <!-- Dirty Indicator -->
            <div 
              v-if="tab.isDirty" 
              class="w-2 h-2 bg-orange-400 rounded-full flex-shrink-0"
            />
            
            <!-- Close Button -->
            <button 
              @click.stop="closeTab(tab.id)"
              class="ml-2 w-4 h-4 flex items-center justify-center hover:bg-gray-200 rounded flex-shrink-0"
            >
              <IconX class="w-3 h-3" />
            </button>
          </div>
        </div>
        
        <!-- Document Pages -->
        <div class="flex-1 overflow-hidden">
          <!-- Welcome Page (No tabs open) -->
          <WelcomePage v-if="appStore.tabs.length === 0" />
          
          <!-- Document Pages for each tab -->
          <div 
            v-for="tab in appStore.tabs" 
            :key="tab.id"
            :class="[
              'h-full',
              tab.isActive ? 'block' : 'hidden'
            ]"
          >
            <!-- Markdown Editor Page -->
            <MarkdownEditorPage 
              v-if="tab.documentType === DocumentType.TEXT_EDITOR"
              ref="markdownEditorRefs"
              :tab="tab"
            />
            
            <!-- Image Viewer Page -->
            <ImageViewerPage 
              v-else-if="tab.documentType === DocumentType.IMAGE_VIEWER"
              ref="imageViewerRefs"
              :tab="tab"
            />
            
            <!-- PDF Viewer Page -->
            <PDFViewerPage 
              v-else-if="tab.documentType === DocumentType.PDF_VIEWER"
              ref="pdfViewerRefs"
              :tab="tab"
            />
            
            <!-- Fallback for unknown types -->
            <div v-else class="h-full flex items-center justify-center text-gray-500">
              <div class="text-center">
                <IconFile class="w-16 h-16 mx-auto mb-4 text-gray-300" />
                <div class="text-xl mb-2">不支持的文件类型</div>
                <div class="text-sm text-gray-400">{{ tab.documentType || 'unknown' }}</div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Right Sidebar (AI Chat) -->
      <RightSidebar v-if="appStore.showRightSidebar" />
    </div>
    
    <!-- Status Bar -->
    <StatusBar v-if="appStore.showStatusbar"/>
  </div>
</template>

<script setup lang="ts">
import { ref, computed } from 'vue'
import { useAppStore } from '@/stores/app'
import { DocumentType } from '@/types'
import type { FileTab } from '@/types'
import TitleBar from '@/components/TitleBar.vue'
import LeftSidebar from '@/components/LeftSidebar.vue'
import RightSidebar from '@/components/RightSidebar.vue'
import StatusBar from '@/components/StatusBar.vue'
import WelcomePage from '@/components/pages/WelcomePage.vue'
import MarkdownEditorPage from '@/components/pages/MarkdownEditorPage.vue'
import ImageViewerPage from '@/components/pages/ImageViewerPage.vue'
import PDFViewerPage from '@/components/pages/PDFViewerPage.vue'
import { 
  IconFileText, 
  IconPhoto, 
  IconFile,
  IconX
} from '@tabler/icons-vue'

const appStore = useAppStore()

// Refs for different page types
const markdownEditorRefs = ref<any[]>([])
const imageViewerRefs = ref<any[]>([])
const pdfViewerRefs = ref<any[]>([])

// Computed
const activeTab = computed(() => appStore.activeTab)

// Methods
function getTabIcon(tab: FileTab) {
  switch (tab.documentType) {
    case DocumentType.TEXT_EDITOR:
      return IconFileText
    case DocumentType.PDF_VIEWER:
      return IconFile
    case DocumentType.IMAGE_VIEWER:
      return IconPhoto
    default:
      return IconFile
  }
}

function switchTab(tabId: string) {
  appStore.setActiveTab(tabId)
}

async function closeTab(tabId: string) {
  const tab = appStore.tabs.find(t => t.id === tabId)
  if (tab && tab.isDirty) {
    const result = await window.electronAPI?.showSaveDialog(tab.name)
    if (result === 'save') {
      await appStore.saveActiveTab()
    } else if (result === 'cancel') {
      return // Cancel close
    }
  }
  
  appStore.closeTab(tabId)
}

function getActivePageRef() {
  if (!activeTab.value) return null
  
  switch (activeTab.value.documentType) {
    case DocumentType.TEXT_EDITOR:
      return markdownEditorRefs.value.find(ref => ref && ref.tab?.id === activeTab.value?.id)
    case DocumentType.IMAGE_VIEWER:
      return imageViewerRefs.value.find(ref => ref && ref.tab?.id === activeTab.value?.id)
    case DocumentType.PDF_VIEWER:
      return pdfViewerRefs.value.find(ref => ref && ref.tab?.id === activeTab.value?.id)
    default:
      return null
  }
}

// Expose methods to parent component (App.vue)
defineExpose({
  handleMenuAction: (action: string) => {
    // First try to handle through the active page
    let handled = false
    const activePageRef = getActivePageRef()
    if (activePageRef?.handleMenuAction) {
      handled = activePageRef.handleMenuAction(action)
    }
    
    // If not handled by active page, fallback to app store
    if (!handled) {
      appStore.handleMenuAction(action)
    }
  },
  updateMenuFormattingState: () => {
    const activePageRef = getActivePageRef()
    if (activePageRef?.updateMenuFormattingState) {
      activePageRef.updateMenuFormattingState()
    }
  }
})
</script>