<template>
  <div class="flex items-center h-9 bg-gray-50 border-b border-gray-200 select-none drag-region">
    
    <!-- Window Controls - handled by system traffic lights -->
    <div v-if="!isMaximized" class="flex items-center pl-20"></div>
    
    <!-- Left Sidebar Toggle -->
    <div class="flex items-center no-drag" :class="isMaximized ? 'pl-2 pr-1' : 'px-1'">
      <button
        @click="appStore.toggleLeftSidebar()"
        class="p-1.5 rounded hover:bg-gray-200 transition-colors"
        title="Toggle Sidebar"
      >
        <IconLayoutSidebarLeftCollapse
          v-if="appStore.showLeftSidebar"
          :size="20"
          class="text-gray-600"
        />
        <IconLayoutSidebarLeftExpand
          v-else
          :size="20"
          class="text-gray-600"
        />
      </button>
    </div>
    
    <!-- Sidebar Mode Navigation - only show when sidebar is visible -->
    <div v-if="appStore.showLeftSidebar" class="flex items-center gap-1 px-2 no-drag">
      <!-- Main navigation group: folder, search, tags -->
      <button
        v-for="mode in mainSidebarModes"
        :key="mode.key"
        @click="handleModeClick(mode.key)"
        :disabled="!appStore.hasOpenFolder"
        class="p-1.5 rounded transition-colors"
        :class="{
          'bg-blue-100 text-blue-700': appStore.leftSidebarMode === mode.key && appStore.hasOpenFolder,
          'text-gray-600 hover:bg-gray-200': appStore.leftSidebarMode !== mode.key && appStore.hasOpenFolder,
          'text-gray-400 cursor-not-allowed': !appStore.hasOpenFolder
        }"
        :title="mode.title"
      >
        <component :is="mode.icon" :size="20" />
      </button>
      
      <!-- Separator -->
      <div class="toolbar-separator" />
      
      <!-- TOC navigation -->
      <button
        @click="handleModeClick('toc')"
        :disabled="appStore.tabs.length === 0"
        class="p-1.5 rounded transition-colors"
        :class="{
          'bg-blue-100 text-blue-700': appStore.leftSidebarMode === 'toc' && appStore.tabs.length > 0,
          'text-gray-600 hover:bg-gray-200': appStore.leftSidebarMode !== 'toc' && appStore.tabs.length > 0,
          'text-gray-400 cursor-not-allowed': appStore.tabs.length === 0
        }"
        title="Table of Contents"
      >
        <IconList :size="20" />
      </button>
    </div>
    
    <!-- Document Tabs Area -->
    <div class="flex items-center min-w-0">
      <!-- Tab Navigation -->
      <div class="flex items-center px-2 no-drag">
        <button
          @click="navigateTabs(-1)"
          :disabled="!canNavigateBack"
          class="p-1 rounded hover:bg-gray-200 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
          title="Previous Tab"
        >
          <IconChevronLeft :size="20" class="text-gray-600" />
        </button>
        <button
          @click="navigateTabs(1)"
          :disabled="!canNavigateForward"
          class="p-1 rounded hover:bg-gray-200 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
          title="Next Tab"
        >
          <IconChevronRight :size="20" class="text-gray-600" />
        </button>
      </div>
      
      <!-- Document Tabs -->
      <div class="flex-1 flex items-center min-w-0 overflow-hidden no-drag">
        <!-- Left separator for tabs -->
        <div v-if="appStore.tabs.length > 0" class="w-px h-9 bg-gray-200"></div>
        
        <div
          v-for="tab in appStore.tabs"
          :key="tab.id"
          class="flex items-center min-w-0 max-w-48 border-r border-gray-200 group no-drag"
          :class="{ 'bg-white': tab.isActive, 'bg-gray-50': !tab.isActive }"
        >
          <button
            @click="appStore.setActiveTab(tab.id)"
            class="flex-1 flex items-center px-3 py-2 min-w-0 text-left hover:bg-gray-100 transition-colors"
            :class="{ 'hover:bg-gray-50': tab.isActive }"
          >
            <span class="truncate text-sm">
              {{ getDisplayName(tab.name) }}
              <span v-if="tab.isDirty" class="text-orange-500 ml-1">•</span>
            </span>
          </button>
          <button
            @click.stop="handleCloseTab(tab)"
            class="p-1 mr-1 rounded hover:bg-gray-200 hover:text-gray-700 transition-all opacity-0 group-hover:opacity-100"
            title="Close"
          >
            <IconX :size="20" class="text-gray-400" />
          </button>
        </div>
        
        <!-- New Tab Button - next to tabs when tabs exist -->
        <div v-if="appStore.tabs.length > 0" class="flex items-center px-2 no-drag">
          <button
            @click="appStore.createNewTab(undefined, undefined, '# Untitled Document\n\n')"
            class="p-1 rounded hover:bg-gray-200 transition-colors"
            title="New Tab"
          >
            <IconPlus :size="20" class="text-gray-600" />
          </button>
        </div>
      </div>
      
      <!-- New Tab Button - in original position when no tabs -->
      <div v-if="appStore.tabs.length === 0" class="flex items-center px-2 no-drag">
        <button
          @click="appStore.createNewTab(undefined, undefined, '# Untitled Document\n\n')"
          class="p-1 rounded hover:bg-gray-200 transition-colors"
          title="New Tab"
        >
          <IconPlus :size="20" class="text-gray-600" />
        </button>
      </div>
    </div>
    
    <!-- Flexible drag area -->
    <div class="flex-1"></div>
    
    <!-- Right Sidebar Toggle -->
    <div class="flex items-center px-2 no-drag">
      <button
        @click="appStore.toggleRightSidebar()"
        class="p-2 rounded hover:bg-gray-200 transition-colors"
        title="Toggle AI Chat"
      >
        <IconLayoutSidebarRightCollapse
          v-if="appStore.showRightSidebar"
          :size="20"
          class="text-gray-600"
        />
        <IconLayoutSidebarRightExpand
          v-else
          :size="20"
          class="text-gray-600"
        />
      </button>
    </div>
  </div>
</template>

<script setup lang="ts">
import { computed, ref, onMounted, watch } from 'vue'
import { useAppStore } from '@/stores/app'
import {
  IconLayoutSidebarLeftCollapse,
  IconLayoutSidebarLeftExpand,
  IconLayoutSidebarRightCollapse,
  IconLayoutSidebarRightExpand,
  IconChevronLeft,
  IconChevronRight,
  IconX,
  IconPlus,
  IconFolder,
  IconSearch,
  IconTag,
  IconList
} from '@tabler/icons-vue'

const appStore = useAppStore()
const isMaximized = ref(false)

const mainSidebarModes = computed(() => [
  {
    key: 'explorer' as const,
    title: 'Explorer',
    icon: IconFolder
  },
  {
    key: 'search' as const,
    title: 'Search',
    icon: IconSearch
  },
  {
    key: 'tag' as const,
    title: 'By TAG',
    icon: IconTag
  }
])

const canNavigateBack = computed(() => {
  const activeIndex = appStore.tabs.findIndex(tab => tab.isActive)
  return activeIndex > 0
})

const canNavigateForward = computed(() => {
  const activeIndex = appStore.tabs.findIndex(tab => tab.isActive)
  return activeIndex < appStore.tabs.length - 1
})

function navigateTabs(direction: number) {
  const activeIndex = appStore.tabs.findIndex(tab => tab.isActive)
  const newIndex = activeIndex + direction
  
  if (newIndex >= 0 && newIndex < appStore.tabs.length) {
    appStore.setActiveTab(appStore.tabs[newIndex].id)
  }
}

function getDisplayName(fileName: string): string {
  if (!fileName) return fileName
  const lastDotIndex = fileName.lastIndexOf('.')
  if (lastDotIndex === -1 || lastDotIndex === 0) {
    return fileName
  }
  return fileName.substring(0, lastDotIndex)
}

async function handleCloseTab(tab: any) {
  
  if (tab.isDirty) {
    // 如果文档有未保存的更改，显示确认对话框
    if (window.electronAPI) {
      const result = await window.electronAPI.showSaveDialog(tab.name)
      if (result === 'save') {
        // 用户选择保存
        await appStore.saveActiveTab()
        appStore.closeTab(tab.id)
      } else if (result === 'dontSave') {
        // 用户选择不保存
        appStore.closeTab(tab.id)
      }
      // 如果用户选择取消，什么都不做
    } else {
      // 如果没有electronAPI，直接关闭
      appStore.closeTab(tab.id)
    }
  } else {
    // 如果文档没有更改，直接关闭
    appStore.closeTab(tab.id)
  }
}

function handleModeClick(mode: string) {
  // 只有在按钮启用时才允许切换
  if (mode === 'toc' && appStore.tabs.length === 0) {
    return
  }
  if (['explorer', 'search', 'tag'].includes(mode) && !appStore.hasOpenFolder) {
    return
  }
  
  appStore.setLeftSidebarMode(mode as any)
}

// 监听状态变化，自动切换到合适的模式
function checkAndSwitchMode() {
  // 如果当前是被禁用的模式，自动切换
  if (['explorer', 'search', 'tag'].includes(appStore.leftSidebarMode) && !appStore.hasOpenFolder) {
    appStore.setLeftSidebarMode('start')
  }
  if (appStore.leftSidebarMode === 'toc' && appStore.tabs.length === 0) {
    // 如果有文件夹打开，切换到explorer，否则切换到start
    if (appStore.hasOpenFolder) {
      appStore.setLeftSidebarMode('explorer')
    } else {
      appStore.setLeftSidebarMode('start')
    }
  }
}

onMounted(async () => {
  if (window.electronAPI) {
    // 监听窗口状态变化事件
    if (window.electronAPI.onWindowStateChanged) {
      window.electronAPI.onWindowStateChanged((state: { maximized: boolean }) => {
        isMaximized.value = state.maximized
      })
    }
    
    // 初始状态为未最大化
    isMaximized.value = false
  }
  
  // 初始检查模式
  checkAndSwitchMode()
})

// 监听相关状态变化
watch([() => appStore.hasOpenFolder, () => appStore.tabs.length], () => {
  checkAndSwitchMode()
})

</script>

<style>
.drag-region {
  -webkit-app-region: drag;
}

.no-drag {
  -webkit-app-region: no-drag;
}
</style>